{"version":3,"sources":["Services/firebase/setup.js","Component/NameForm.js","Component/NavProyect.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","db","firestore","NameForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","value","preventDefault","collection","add","Cliente","then","console","log","catch","react_default","a","createElement","onSubmit","type","onChange","onClick","Component","Navigation","className","App","NavProyect","Component_NameForm","variant","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kPAKAA,IAASC,cACT,CACIC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,uBAGf,IACeC,EADJN,IAASO,mBCsCHC,cA5Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,IAGRR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPHA,4EAUNa,GACXV,KAAKW,SAAS,CACZN,KAAMK,EAAME,OAAOC,6CAIVH,GACXA,EAAMI,iBACNd,KAAKW,SAAS,CACZN,KAAK,KAEPZ,EAAGsB,WAAW,iBAAiBC,IAAI,CACjCC,QAASjB,KAAKI,MAAMC,OACnBa,KAAM,WACPC,QAAQC,IAAI,aACXC,MAAO,WACRF,QAAQC,IAAI,4CAKd,OACEE,EAAAC,EAAAC,cAAA,QAAMC,SAAUzB,KAAKS,cACnBa,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOb,MAAOb,KAAKI,MAAMC,KAAMsB,SAAU3B,KAAKM,gBAE5DgB,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASb,MAAM,cAAce,QAAU5B,KAAKS,uBAtC3CoB,aCORC,kMARP,OACIR,EAAAC,EAAAC,cAAA,OAAKO,UAAU,UAAf,uBAHaF,cCoCVG,mLAlBX,OACEV,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAES,EAAF,MACAX,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAEU,EAAF,MAIAZ,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YACfT,EAAAC,EAAAC,cAAA,UAAQW,QAAQ,SAAUT,KAAK,SAASK,UAAU,mBAAlD,eACAT,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASK,UAAU,mBAAhC,8BAbQF,aCNEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAQpB,EAAAC,EAAAC,cAACmB,EAAD,MACfC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.49f69fe2.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/app';\nimport 'firebase/firestore';\n\n\nfirebase.initializeApp(\n{\n    apiKey: \"AIzaSyDMys9ZKjAjqF-CvzIOanDQGymvyn967Oo\",\n    authDomain: \"burger-queen-a674b.firebaseapp.com\",\n    databaseURL: \"https://burger-queen-a674b.firebaseio.com\",\n    projectId: \"burger-queen-a674b\",\n  });\n\nconst db = firebase.firestore();\nexport default db;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport db from '../Services/firebase/setup';\n\n\n\nclass NameForm extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        name: ''\n      };\n  \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(event) {\n      this.setState({\n        name: event.target.value\n      })\n    };\n  \n    handleSubmit(event) {\n      event.preventDefault();\n      this.setState({\n        name:''\n      })\n      db.collection('OrdenClientes').add({\n        Cliente: this.state.name\n      }).then (()=> {\n        console.log('enviado')\n      }).catch (()=>{\n        console.log('error');\n      })\n    }\n  \n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Nombre\n            <input type=\"text\" value={this.state.name} onChange={this.handleChange} />\n          </label>\n          <input type=\"submit\" value=\"Tomar orden\" onClick= {this.handleSubmit} />\n        </form>\n      );\n    }\n  }\n   \n  \n  export default NameForm;","import React, { Component } from 'react';\nimport './nav.css';\n\nclass Navigation extends Component {\n    render () {\n        return (\n            <nav className=\"navPag\">\n            Burger Queen\n            </nav>\n        )\n    }\n}\n\nexport default Navigation;","//Dependencias\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport {db} from './Services/firebase/setup';\n\n//Componentes\nimport NameForm from './Component/NameForm';\n// import CardsMenu from './Component/Cards'\nimport { Button } from 'react-bootstrap';\nimport './App.css';\nimport Navigation from './Component/NavProyect';\n// import Content from './Component/Content';\n//Data\n// import {Menu} from './Component/Menu.json'\n// console.log(Menu)\n\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n         < Navigation />\n         <br></br>\n          < NameForm/>\n          {/* <CardsMenu/> */}\n          {/* <Content /> */}\n\n          <div className=\"col-md-4\">\n          <button variant=\"danger\"  type=\"submit\" className=\"btn btn-success\"> Desayuno  </button>\n          <button type=\"submit\" className=\"btn btn-success\"> Almuerzo y Cena </button>\n          </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n// import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render( <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}